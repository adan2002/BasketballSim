#generate random points so ggplot can be used
df <- data.frame(x=sample(1:64, 1000, replace=T),
y=sample(1:64, 1000, replace=T))
plot <- ggplot(df, aes(x,y)) +
annotation_custom(rasterGrob(img, width=unit(1,"npc"), height=unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
scale_y_continuous(limits = c(-10, 110)) +
scale_x_continuous(limits = c(0, 50)) +
annotate("rect", xmin=2, xmax=48, ymin=10, ymax=20, alpha=0.7, color='black', fill= sub_df$Color[1]) +
annotate("rect", xmin=2, xmax=48, ymin=20, ymax=30, alpha=0.7, color='black', fill= sub_df$Color[2]) +
annotate("rect", xmin=2, xmax=48, ymin=30, ymax=40, alpha=0.7, color='black', fill= sub_df$Color[3]) +
annotate("rect", xmin=2, xmax=48, ymin=40, ymax=50, alpha=0.7, color='black', fill= sub_df$Color[4]) +
annotate("rect", xmin=2, xmax=48, ymin=50, ymax=60, alpha=0.7, color='black', fill= sub_df$Color[5]) +
annotate("rect", xmin=2, xmax=48, ymin=60, ymax=70, alpha=0.7, color='black', fill= sub_df$Color[6]) +
annotate("rect", xmin=2, xmax=48, ymin=70, ymax=80, alpha=0.7, color='black', fill= sub_df$Color[7]) +
annotate("rect", xmin=2, xmax=48, ymin=80, ymax=90, alpha=0.7, color='black', fill= sub_df$Color[8]) +
annotate("rect", xmin=2, xmax=48, ymin=90, ymax=100, alpha=0.7, color='black', fill= sub_df$Color[9]) +
ggtitle(as.character(sub_df$Tm[1])) +
scale_fill_manual(name = "Treatment & State",
labels = c("0-10%", "10-20%", "20-30%", "30-40%", "40-50%", "50+%"),
values = c(cr0_10, cr10_20, cr20_30, cr30_40, cr40_50, cr50plus)) +
theme(plot.title=element_text(size=20, face="bold")) #font size of title
print(plot)
Sys.sleep(.5)
#store plot into list
plotlist[[n]] <- plot
n = n + 1 #increment counter
}
#plotlist contains color maps for 32 teams
#Extract uniques elements from Tm column vector
NFLteams <- unique(third_downs_df$Tm)
cr0_10 <-  "#003D99" # 0 to 10%
cr10_20 <- "#6666FF"
cr20_30 <- "#E5E5FF"
cr30_40 <- "#FF9999"
cr40_50 <- "#FF3333"
cr50plus <- "#990000"
#for loop for generate plots
n = 1 #counter
plotlist <- vector('list', length(NFLteams)) #list for plots
for (team in NFLteams){
print(team)
sub_df <- filter(third_downs_df, Tm == team) %>%
mutate(Color = ifelse( (Conv_Rate <=  0.10) , cr0_10, #add new column for field interval
ifelse( (Conv_Rate > 0.10 & Conv_Rate <= 0.20), cr10_20,
ifelse( (Conv_Rate > 0.20 & Conv_Rate <= 0.30), cr20_30,
ifelse( (Conv_Rate > 0.30 & Conv_Rate <= 0.40), cr30_40,
ifelse( (Conv_Rate > 0.40 & Conv_Rate <= 0.50), cr40_50, cr50plus))))))
#map plot
img <- readJPEG("C:/Users/Adan/Downloads/football field.jpg")
#generate random points so ggplot can be used
df <- data.frame(x=sample(1:64, 1000, replace=T),
y=sample(1:64, 1000, replace=T))
plot <- ggplot(df, aes(x,y)) +
annotation_custom(rasterGrob(img, width=unit(1,"npc"), height=unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
scale_y_continuous(limits = c(-10, 110)) +
scale_x_continuous(limits = c(0, 50)) +
annotate("rect", xmin=2, xmax=48, ymin=10, ymax=20, alpha=0.7, color='black', fill= sub_df$Color[1]) +
annotate("rect", xmin=2, xmax=48, ymin=20, ymax=30, alpha=0.7, color='black', fill= sub_df$Color[2]) +
annotate("rect", xmin=2, xmax=48, ymin=30, ymax=40, alpha=0.7, color='black', fill= sub_df$Color[3]) +
annotate("rect", xmin=2, xmax=48, ymin=40, ymax=50, alpha=0.7, color='black', fill= sub_df$Color[4]) +
annotate("rect", xmin=2, xmax=48, ymin=50, ymax=60, alpha=0.7, color='black', fill= sub_df$Color[5]) +
annotate("rect", xmin=2, xmax=48, ymin=60, ymax=70, alpha=0.7, color='black', fill= sub_df$Color[6]) +
annotate("rect", xmin=2, xmax=48, ymin=70, ymax=80, alpha=0.7, color='black', fill= sub_df$Color[7]) +
annotate("rect", xmin=2, xmax=48, ymin=80, ymax=90, alpha=0.7, color='black', fill= sub_df$Color[8]) +
annotate("rect", xmin=2, xmax=48, ymin=90, ymax=100, alpha=0.7, color='black', fill= sub_df$Color[9]) +
ggtitle(as.character(sub_df$Tm[1])) +
scale_fill_manual(name = "Treatment & State",
labels = c("0-10%", "10-20%", "20-30%", "30-40%", "40-50%", "50+%"),
values = c(cr0_10, cr10_20, cr20_30, cr30_40, cr40_50, cr50plus)) +
theme(plot.title=element_text(size=20, face="bold")) #font size of title
print(plot)
Sys.sleep(.5)
#store plot into list
plotlist[[n]] <- plot
n = n + 1 #increment counter
}
#plotlist contains color maps for 32 teams
third_downs_df <- tbl_df(plays) %>%
group_by(Tm, Interval) %>%
summarise(Conv_Rate = sum(Conversion)/n(), NoPlays = n())
#view new dataframe
third_downs_df
#Extract uniques elements from Tm column vector
NFLteams <- unique(third_downs_df$Tm)
cr0_10 <-  "#003D99" # 0 to 10%
cr10_20 <- "#6666FF"
cr20_30 <- "#E5E5FF"
cr30_40 <- "#FF9999"
cr40_50 <- "#FF3333"
cr50plus <- "#990000"
#for loop for generate plots
n = 1 #counter
plotlist <- vector('list', length(NFLteams)) #list for plots
for (team in NFLteams){
print(team)
sub_df <- filter(third_downs_df, Tm == team) %>%
mutate(Color = ifelse( (Conv_Rate <=  0.10) , cr0_10, #add new column for field interval
ifelse( (Conv_Rate > 0.10 & Conv_Rate <= 0.20), cr10_20,
ifelse( (Conv_Rate > 0.20 & Conv_Rate <= 0.30), cr20_30,
ifelse( (Conv_Rate > 0.30 & Conv_Rate <= 0.40), cr30_40,
ifelse( (Conv_Rate > 0.40 & Conv_Rate <= 0.50), cr40_50, cr50plus))))))
#map plot
img <- readJPEG("C:/Users/Adan/Downloads/football field.jpg")
#generate random points so ggplot can be used
df <- data.frame(x=sample(1:64, 1000, replace=T),
y=sample(1:64, 1000, replace=T))
plot <- ggplot(df, aes(x,y)) +
annotation_custom(rasterGrob(img, width=unit(1,"npc"), height=unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
scale_y_continuous(limits = c(-10, 110)) +
scale_x_continuous(limits = c(0, 50)) +
annotate("rect", xmin=2, xmax=48, ymin=10, ymax=20, alpha=0.7, color='black', fill= sub_df$Color[1]) +
annotate("rect", xmin=2, xmax=48, ymin=20, ymax=30, alpha=0.7, color='black', fill= sub_df$Color[2]) +
annotate("rect", xmin=2, xmax=48, ymin=30, ymax=40, alpha=0.7, color='black', fill= sub_df$Color[3]) +
annotate("rect", xmin=2, xmax=48, ymin=40, ymax=50, alpha=0.7, color='black', fill= sub_df$Color[4]) +
annotate("rect", xmin=2, xmax=48, ymin=50, ymax=60, alpha=0.7, color='black', fill= sub_df$Color[5]) +
annotate("rect", xmin=2, xmax=48, ymin=60, ymax=70, alpha=0.7, color='black', fill= sub_df$Color[6]) +
annotate("rect", xmin=2, xmax=48, ymin=70, ymax=80, alpha=0.7, color='black', fill= sub_df$Color[7]) +
annotate("rect", xmin=2, xmax=48, ymin=80, ymax=90, alpha=0.7, color='black', fill= sub_df$Color[8]) +
annotate("rect", xmin=2, xmax=48, ymin=90, ymax=100, alpha=0.7, color='black', fill= sub_df$Color[9]) +
ggtitle(as.character(sub_df$Tm[1])) +
scale_fill_manual(name = "Treatment & State",
labels = c("0-10%", "10-20%", "20-30%", "30-40%", "40-50%", "50+%"),
values = c(cr0_10, cr10_20, cr20_30, cr30_40, cr40_50, cr50plus)) +
theme(plot.title=element_text(size=20, face="bold")) #font size of title
print(plot)
Sys.sleep(.5)
#store plot into list
plotlist[[n]] <- plot
n = n + 1 #increment counter
}
#plotlist contains color maps for 32 teams
##QSS 30 project
#NFL 3rd down conversion rate
#Data handling of Pro Football Reference data
####################
####Main Program####
####################
#Function Definitions can be found below
#load packages
suppressMessages(library(dplyr))
suppressMessages(library(jpeg))
suppressMessages(library(grid))
suppressMessages(library(ggplot2))
suppressMessages(library(RColorBrewer)) #color package
#path = "C:/Users/Adan/Dropbox/School/Senior Year/15/QSS"
playlog <- tbl_df(read.csv(file = "C:/Users/Adan/Dropbox/School/Senior Year/15F/QSS 30/NFL Data/project data.csv",
header = T))
#or
#playlog <- tbl_df(read.csv(file = file.choose(), header = T))
#convert NA's in Yds column to zero
playlog$Yds[is.na(playlog$Yds)] <- 0
#Change factors to strings in table
i <- sapply(playlog, is.factor)
playlog[i] <- lapply(playlog[i], as.character)
#Create a map from team names to abbreviations
team_dict = list("Vikings" = "MIN", "Lions" = "DET", "Bears" = "CHI", "Packers" = "GNB",
"Seahawks" = "SEA", "Cardinals" = "CRD", "49ers" = "SFO", "Rams" = "RAM",
"Buccaneers" = "TAM", "Panthers" = "CAR", "Saints" = "NOR", "Falcons" = "ATL",
"Giants" = "NYG", "Redskins" = "WAS", "Eagles" = "PHI", "Cowboys" = "DAL",
"Patriots" = "NWE", "Jets" = "NYJ", "Bills" = "BUF", "Dolphins" = "MIA",
"Steelers" = "PIT", "Ravens" = "RAV", "Bengals" = "CIN", "Browns" = "CLE",
"Colts" = "CLT", "Titans" = "OTI", "Jaguars" = "JAX", "Texans" = "HTX",
"Broncos" = "DEN", "Chiefs" = "KAN", "Chargers" = "SDG", "Raiders" = "RAI")
for (i in 1:length(playlog[[1]])) { #for each row in playlog
#Append Column 15--score differential
temp = unlist(strsplit(toString(playlog[i,9]),"-")) #separate scores
playlog[i,15] = strtoi(temp[1])-strtoi(temp[2]) #how many points ahead/behind is the team on offense
#Column 16--overall field position
#column 8 substring(1,3) is team abbreviation, substring(5,6) is ydline unless on the 50
if (playlog[i,8] == "50") { #check if team is on the 50 ydline
playlog[i,16] = 50
}
else if (substr(as.character(playlog[i,8]),1,3) == team_dict[as.character(playlog[i,2])]) { #check if team is on own half of field
playlog[i,16] = strtoi(substr(playlog[i,8],5,6))
}
else { #check if team is on other half
playlog[i,16] = 100 - strtoi(substr(playlog[i,8],5,6))
}
}
#rename new columns
colnames(playlog)[15] <- "ScoreDiff"
colnames(playlog)[16] <- "FieldPos"
#print out playlog data frame
playlog <- tbl_df(playlog)
#truncate dataframe
plays <- tbl_df(playlog) %>%
mutate(Conversion = ifelse(Yds >= ToGo, 1, 0)) %>% #dummy variable for third down conversion
select(-Location, -Score, -EPB, -EPA, -Detail, -Diff) %>% #, -Time) %>%
mutate(Interval = ifelse( (FieldPos + as.numeric(ToGo) <=  10) , "0-10", #add new column for field interval
ifelse( (FieldPos + as.numeric(ToGo) > 10 & FieldPos + as.numeric(ToGo) <= 20), '10-20',
ifelse( (FieldPos + ToGo > 20 & FieldPos + ToGo <= 30), '20-30',
ifelse( (FieldPos + ToGo > 30 & FieldPos + ToGo <= 40), '30-40',
ifelse( (FieldPos + ToGo > 40 & FieldPos + ToGo <= 50), '40-50',
ifelse( (FieldPos + ToGo > 50 & FieldPos + ToGo <= 60), '50-60',
ifelse( (FieldPos + ToGo > 60 & FieldPos + ToGo <= 70), '60-70',
ifelse( (FieldPos + ToGo > 70 & FieldPos + ToGo <= 80), '70-80',
ifelse( (FieldPos + ToGo > 80 & FieldPos + ToGo <= 90), '80-90',
'90-100'))))))))))
#print out df
plays
#Adding fixed effects for regression
#Team fixed effects columns. Takes a long time. Sorry.
col = 15
for (key in names(team_dict)){
for (i in 1:25249) {
if (plays[i,2]==key) {
plays[i,col] = 1
} else{
plays[i,col] = 0
}
}
col = col + 1
}
#Quarter fixed effects columns
col = 47
for (i in 1:4) {
for (j in 1:25249){
if (dta[j,4]==i){
dta[j,col]=1
} else {
dta[j,col] = 0
}
}
col = col + 1
}
col = 51
#pass/run dummy
for(i in 1:25249){
temp = unlist(strsplit(toString(dta[i,10])," "))
if (temp[3] == "pass" || temp[3] == "spiked") {
dta[i,col] = 1
}
else {
dta[i,col] = 0
}
}
#name columns
for (i in 1:32){
colnames(dta)[14+i] = names(team_dict)[i]
}
#name other columns
colnames(dta)[47]="Q1"
colnames(dta)[48]="Q2"
colnames(dta)[49]="Q3"
colnames(dta)[50]="Q4"
colnames(dta)[51]="Pass"
#single variate regression
reg = glm(Conversion~FieldPosition,data = dta, family = "binomial")
print(summary(reg))
#regression with controls and quarter fixed effects
reg2 = glm(Conversion~FieldPosition + ToGo + Differential + Q2 + Q3 + Q4, data = dta, family = "binomial")
print(summary(reg2))
#regression with controls and quarter fixed effects and team fixed effects
reg3 = glm(Conversion~FieldPosition + ToGo + Differential + Q2 + Q3 + Q4 + Jets + Patriots + Bills + Dolphins + Steelers + Bengals + Ravens + Browns + Colts + Titans + Texans + Jaguars + Chiefs + Broncos + Raiders + Chargers + Giants + Cowboys + Eagles + Redskins + Buccaneers + Falcons + Saints + Panthers + Packers + Lions + Vikings + Bears + Rams + Seahawks + Cardinals ,data = dta, family = "binomial")
print(summary(reg3))
#wald test
test1 = waldtest(reg3, test = "Chisq",c(7:37))
print(test1)
#generate counts for 3rd down conversions for field interval by team
#use they averages to create color plots
third_downs_df <- tbl_df(plays) %>%
group_by(Tm, Interval) %>%
summarise(Conv_Rate = sum(Conversion)/n(), NoPlays = n())
#view new dataframe
third_downs_df
#Extract uniques elements from Tm column vector
NFLteams <- unique(third_downs_df$Tm)
cr0_10 <-  "#003D99" # 0 to 10%
cr10_20 <- "#6666FF"
cr20_30 <- "#E5E5FF"
cr30_40 <- "#FF9999"
cr40_50 <- "#FF3333"
cr50plus <- "#990000"
#for loop for generate plots
n = 1 #counter
plotlist <- vector('list', length(NFLteams)) #list for plots
img <- readJPEG("C:/Users/Adan/Downloads/football field.jpg")
for (team in NFLteams){
print(team)
sub_df <- filter(third_downs_df, Tm == team) %>%
mutate(Color = ifelse( (Conv_Rate <=  0.10) , cr0_10, #add new column for field interval
ifelse( (Conv_Rate > 0.10 & Conv_Rate <= 0.20), cr10_20,
ifelse( (Conv_Rate > 0.20 & Conv_Rate <= 0.30), cr20_30,
ifelse( (Conv_Rate > 0.30 & Conv_Rate <= 0.40), cr30_40,
ifelse( (Conv_Rate > 0.40 & Conv_Rate <= 0.50), cr40_50, cr50plus))))))
#map plot
#generate random points so ggplot can be used
df <- data.frame(x=sample(1:64, 1000, replace=T),
y=sample(1:64, 1000, replace=T))
plot <- ggplot(df, aes(x,y)) +
annotation_custom(rasterGrob(img, width=unit(1,"npc"), height=unit(1,"npc")),
-Inf, Inf, -Inf, Inf) +
scale_y_continuous(limits = c(-10, 110)) +
scale_x_continuous(limits = c(0, 50)) +
annotate("rect", xmin=2, xmax=48, ymin=10, ymax=20, alpha=0.7, color='black', fill= sub_df$Color[1]) +
annotate("rect", xmin=2, xmax=48, ymin=20, ymax=30, alpha=0.7, color='black', fill= sub_df$Color[2]) +
annotate("rect", xmin=2, xmax=48, ymin=30, ymax=40, alpha=0.7, color='black', fill= sub_df$Color[3]) +
annotate("rect", xmin=2, xmax=48, ymin=40, ymax=50, alpha=0.7, color='black', fill= sub_df$Color[4]) +
annotate("rect", xmin=2, xmax=48, ymin=50, ymax=60, alpha=0.7, color='black', fill= sub_df$Color[5]) +
annotate("rect", xmin=2, xmax=48, ymin=60, ymax=70, alpha=0.7, color='black', fill= sub_df$Color[6]) +
annotate("rect", xmin=2, xmax=48, ymin=70, ymax=80, alpha=0.7, color='black', fill= sub_df$Color[7]) +
annotate("rect", xmin=2, xmax=48, ymin=80, ymax=90, alpha=0.7, color='black', fill= sub_df$Color[8]) +
annotate("rect", xmin=2, xmax=48, ymin=90, ymax=100, alpha=0.7, color='black', fill= sub_df$Color[9]) +
ggtitle(as.character(sub_df$Tm[1])) +
scale_fill_manual(name = "Treatment & State",
labels = c("0-10%", "10-20%", "20-30%", "30-40%", "40-50%", "50+%"),
values = c(cr0_10, cr10_20, cr20_30, cr30_40, cr40_50, cr50plus)) +
theme(plot.title=element_text(size=20, face="bold")) #font size of title
print(plot)
Sys.sleep(.5)
#store plot into list
plotlist[[n]] <- plot
n = n + 1 #increment counter
}
#plotlist contains color maps for 32 teams
plays
#Team fixed effects columns. Takes a long time. Sorry.
col = 15
for (key in names(team_dict)){
for (i in 1:25249) {
if (plays[i,2]==key) {
plays[i,col] = 1
} else{
plays[i,col] = 0
}
}
col = col + 1
}
plays
col = 13
for (key in names(team_dict)){
for (i in 1:25249) {
if (plays[i,2]==key) {
plays[i,col] = 1
} else{
plays[i,col] = 0
}
}
col = col + 1
}
require(ISLR)
names(Smarket)
32*32
choose(5,2)
choose(18,2)*.1^2*.9^16
choose(18,2)
exp(-10)*10^12/(12!)
12!
factorial(4)
exp(-10)*10^12/factorial(12)
0.25+2*.41+3*.13
1*.25+4*.41+9*.13-1.46^2
1*.09+2*.22+3*.05+2*.11+4*.11+6*.02
1*(0.08+.09+.22+0.05)+2*(.08+.11+.11+.02)
1.46-1.46*1.08
sqrt(.9284)
1*(0.08+.09+.22+0.05)+4*(.08+.11+.11+.02)
1*(0.08+.09+.22+0.05)+4*(.08+.11+.11+.02)-1.08^2
-.1168/(.964*.5536)
choose(20,3)
35*8
factorial(20)/(factorial(3)*factorial(17))
factorial(20)/factorial(17)
4*0.05+9*.08+16*.08+25*.09+36*.14+49*.22+64*.11+81*.05*100*.11+144*.02
4*0.05+9*.08+16*.08+25*.09+36*.14+49*.22+64*.11+81*.05*100*.11+144*.02-6.16^2
sqrt(36.7944)
4*0.05+9*.08+16*.08+25*.09+36*.14+49*.22+64*.11+81*.05+100*.11+144*.02-6.16^2
sqrt(7.2944)
sqrt(66/100*34/100/100)
1-pnorm(-(.1407))
pnorm(.1407)
exp(-0.5)+exp(-.9)
exp(-0.5)*exp(-.9)
1-pnorm(-(..15))
1-pnorm(-(.15))
1-pnorm(-(.15))-.5 + 1-pnorm(-(.05))-.5
pnorm(0.134)
pnorm(1.96)
pnorm(1.96)-50
pnorm(1.96)-.50
2*(pnorm(1.96)-.50)
2*(pnorm(0.134)-.50)
qt(.95, 14)
qt(1-.025, 14)
qt(1-.05/2, 14)
qt(.05/2, 14)
qt(1-.05/2, 14)
2.145*sqrt(0.49,15)
2.145*sqrt(0.49/15)
.1*(1-(1-.1^2))
.05*(1-(1-.05^2))
.05^3
cos(pi/2)
cos(pi)
cos(180)
cos(-180)
cos(0)
pnorm(-abs(-1.18))
sqrt(66/100*34/100)/100)
sqrt((66/100*34/100)/100)
for (year in 1950:2015) {
download.file(url=paste0(
"ftp://ftp.cdc.noaa.gov/Datasets/ncep.reanalysis.dailyavgs/surface/air.sig995.",
year, ".nc"),
destfile=paste0("air.sig995.", year, ".nc"), mode="wb")
}
runif(4)
runif(4)*10
x1 <- runif(20)*10
x2 <- runif(20)*10
x3 <- runif(20)*10
runif(20, min = 25, max=75)
y <- runif(20, min = 25, max=75)
mod <- lm(y ~ x1+x2+x3)
summary(mod)
plot(mod)
55*6
## Webscraper for tables in html
## Use to read in NBA rosters from ESPN
setwd("C:/Users/Adan/Desktop/BasketballSim")
require(rvest)
require(dplyr)
# loop thru every nba team
NBA_teams <- c('ATL', 'BOS', 'BKN', 'CHA', 'CHI', 'CLE',
'DAL', 'DEN', 'DET', 'GSW', 'HOU', 'IND',
'LAC', 'LAL', 'MEM', 'MIA', 'MIL', 'MIN',
'NO', 'NYK', 'OKC', 'ORL', 'PHI', 'PHO',
'POR', 'SAC', 'SAS', 'TOR', 'UTH', 'WAS')
NBA_players <- NULL
for (name in NBA_teams){
url <- paste0("http://espn.go.com/nba/team/roster/_/name/", name)
table <- url %>%
html() %>%
html_table()
roster <- table[[1]]
colnames(roster) <- roster[2,] # assing header
roster <- roster[-c(1,2),] # drop first two rows
roster$Team <- name
NBA_players <- rbind(NBA_players, roster) # merge tables
}
# reset dataframe row index
rownames(NBA_players) <- seq(length=nrow(NBA_players))
# dictionary mapping team abbv to city
# for some reason BOS & BKN, NO an NYK had to be swapped
cities <- list(ATL = "Atlanta", BOS = 'Brooklyn', BKN = "Boston",
CHA = "Charlotte", CHI = "Chicago", CLE = "Cleveland",
DAL = "Dallas", DEN = "Denver", DET = "Detroit",
GSW  = "Golden State", HOU = "Houston", IND = "Indiana",
LAC = "LA Clippers", LAL = "LA Lakers", MEM = "Memphis",
MIA = "Miami", MIL = "Milwaukee", MIN = "Minnesota",
NYK = "New Orleans", NO = "New York", OKC = "Oklahoma City",
ORL = "Orlando", PHI = "Philadelphia", PHO = "Phoenix",
POR = "Portland", SAC ="Sacramento", SAS = "San Antonio",
TOR = "Toronto", UTH = "Utah", WAS = "Washington")
# import data
ratings <- tbl_df(read.csv(file = 'NBA 2K16 Ratings.csv', header = T))
roster <- tbl_df(read.csv(file = 'NBAplayers.csv', header = T)) %>%
mutate(City = cities[Team])
roster$City <- sapply(roster$City, as.factor) # convert char to factor
ranks <- tbl_df(read.csv(file = 'RosterRanks.csv', header = T))
newRoster <- na.omit(left_join(ranks, roster, by = c("Fint", "LastName", "City")))
finalRoster <- na.omit(left_join(ratings, newRoster, by = c("FirstName", "LastName")))
finalRoster <- select(finalRoster, -c(FirstName, LastName, HT, Position.x, Fint, COLLEGE,
X2015.2016.SALARY, WT, NO., City))
names(finalRoster) <- tolower(names(finalRoster)) # make headers lowercase
colnames(finalRoster)[4] <- "position"
# get team counts
t <- finalRoster %>%
group_by(team) %>%
summarise( cnt = n())
write.csv(t, file = 'team_counts.csv', row.names = FALSE)
write.csv(finalRoster, file = 'NBA_roster_ratings.csv', row.names = FALSE)
finalRoster
write.csv(t, file = 'team_counts.csv', row.names = FALSE)
write.csv(finalRoster, file = 'NBA_roster_ratings.csv', row.names = FALSE)
ratings
finalRoster <- na.omit(left_join(newRoster, ratings by = c("FirstName", "LastName")))
ratings <- tbl_df(read.csv(file = 'NBA 2K16 Ratings.csv', header = T))
roster <- tbl_df(read.csv(file = 'NBAplayers.csv', header = T)) %>%
mutate(City = cities[Team])
roster$City <- sapply(roster$City, as.factor) # convert char to factor
ranks <- tbl_df(read.csv(file = 'RosterRanks.csv', header = T))
newRoster <- na.omit(left_join(ranks, roster, by = c("Fint", "LastName", "City")))
finalRoster <- na.omit(left_join(newRoster, ratings, by = c("FirstName", "LastName")))
finalRoster <- select(finalRoster, -c(FirstName, LastName, HT, Position.x, Fint, COLLEGE,
X2015.2016.SALARY, WT, NO., City))
finalRoster
ratings <- tbl_df(read.csv(file = 'NBA 2K16 Ratings.csv', header = T))
roster <- tbl_df(read.csv(file = 'NBAplayers.csv', header = T)) %>%
mutate(City = cities[Team])
roster$City <- sapply(roster$City, as.factor) # convert char to factor
ranks <- tbl_df(read.csv(file = 'RosterRanks.csv', header = T))
newRoster <- na.omit(left_join(ranks, roster, by = c("Fint", "LastName", "City")))
finalRoster <- na.omit(left_join(newRoster, ratings, by = c("FirstName", "LastName")))
finalRoster <- select(finalRoster, -c(FirstName, LastName, HT, Position.x, Fint, COLLEGE,
X2015.2016.SALARY, WT, NO., City))
finalRoster
newRoster <- na.omit(left_join(roster, ranks by = c("Fint", "LastName", "City")))
finalRoster <- na.omit(left_join(newRoster, ratings, by = c("FirstName", "LastName")))
finalRoster <- select(finalRoster, -c(FirstName, LastName, HT, Position.x, Fint, COLLEGE,
X2015.2016.SALARY, WT, NO., City))
names(finalRoster) <- tolower(names(finalRoster)) # make headers lowercase
finalRoster
newRoster <- na.omit(left_join(roster, ranks by = c("Fint", "LastName", "City")))
newRoster <- na.omit(left_join(roster, ranks, by = c("Fint", "LastName", "City")))
finalRoster <- na.omit(left_join(newRoster, ratings, by = c("FirstName", "LastName")))
finalRoster <- select(finalRoster, -c(FirstName, LastName, HT, Position.x, Fint, COLLEGE,
X2015.2016.SALARY, WT, NO., City))
finalRoster
